{"version":3,"sources":["logo.svg","components/Header.js","components/Wrapper.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Wrapper","props","children","Table","employeeItems","i","renderEmployeeArray","useState","name","searchName","setSearchName","employeeJson","employees","map","employee","key","id","scope","photo","position","email","length","includes","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iuBAAAA,EAAOC,QAAU,IAA0B,kC,iLCkB5BC,MAff,WAEI,OACI,yBAAKC,UAAU,yBACX,wBAAIA,UAAU,aAAd,sBACA,yBAAKA,UAAU,OACf,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,YCHtCC,MAJf,SAAiBC,GACf,OAAO,yBAAKL,UAAU,WAAWK,EAAMC,W,qBCkF1BC,MAjFf,SAAeF,GAEX,IAAIG,EAAeC,EAAE,EAAGC,EAAsB,GAF5B,EAKkBC,mBAAS,CACzCC,KAAM,KANQ,mBAKXC,EALW,KAKCC,EALD,KAmBlB,GAAwB,KAApBD,EAAWD,KACVJ,EAAgBO,EAAaC,UAAUC,KAAI,SAAAC,GAAQ,OAEhD,wBAAIC,IAAOD,EAASE,IACpB,wBAAKC,MAAO,OAAOH,EAASE,IAC5B,wBAAIpB,UAAW,QAAf,IAAuB,yBAAKC,IAAMiB,EAASI,MAAOtB,UAAW,0BAA0BG,IAAOe,EAASN,QACvG,4BAAKM,EAASN,MACd,4BAAKM,EAASK,UACd,4BAAKL,EAASM,eAGd,CACJ,IAAKf,EAAE,EAAGA,EAAGM,EAAaC,UAAUS,OAAQhB,IACnCM,EAAaC,UAAUP,GAAGG,KAAMc,SAASb,EAAWD,QACrDF,EAAoBD,GAAKM,EAAaC,UAAUP,IAIxDD,EAAgBE,EAAoBO,KAAI,SAAAC,GAAQ,OAE5C,wBAAIC,IAAOD,EAASE,IACpB,wBAAKC,MAAO,OAAOH,EAASE,IAC5B,wBAAIpB,UAAW,QAAf,IAAuB,yBAAKC,IAAMiB,EAASI,MAAOtB,UAAW,0BAA0BG,IAAOe,EAASN,QACvG,4BAAKM,EAASN,MACd,4BAAKM,EAASK,UACd,4BAAKL,EAASM,WAKtB,OACI,yBAAKxB,UAAY,aACb,yBAAKA,UAAW,OACZ,yBAAKA,UAAU,UACX,0BAAMA,UAAU,cAAc2B,SA5CzB,SAAAC,GACjBA,EAAEC,mBA4Cc,yBAAK7B,UAAU,2BACX,2BAAO8B,KAAK,OAAO9B,UAAU,eAAeoB,GAAG,kBAAkBW,YAAY,wBAAwBC,SAzCxG,SAAAJ,GACjBd,EAAc,2BAAKD,GAAN,IAAkBD,KAAMgB,EAAEK,OAAOC,aA0C9B,4BAAQJ,KAAK,SAAS9B,UAAU,wBAAhC,YAIZ,2BAAOA,UAAU,SACb,+BACI,4BACA,wBAAIqB,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,WAGJ,+BACMb,MCzDP2B,MAXf,WAEI,OACE,kBAAC,EAAD,KACM,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6bb114c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport logo from '../logo.svg';\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1 className=\"display-4\">Employee Directory</h1>\r\n            <div className=\"App\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </div>\r\n\r\n        </div> \r\n\r\n        \r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, {useState} from \"react\";\r\nimport employeeJson from '../employees.json'\r\n\r\n\r\nfunction Table(props) {\r\n\r\n    let employeeItems, i=0, renderEmployeeArray = [];\r\n\r\n\r\n    const [searchName, setSearchName] = useState({\r\n        name: \"\"\r\n    })\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n \r\n    }\r\n\r\n    const handleChange = e => {\r\n        setSearchName({ ...searchName, name: e.target.value})\r\n        //console.log(searchName.name);\r\n    }\r\n\r\n    if (searchName.name === \"\") {\r\n         employeeItems = employeeJson.employees.map(employee => \r\n\r\n            <tr key = {employee.id}>\r\n            <th  scope =\"row\">{employee.id}</th>\r\n            <td className =\"w-25\"> <img src= {employee.photo} className =\"img-fluid img-thumbnail\" alt = {employee.name}></img></td>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.position}</td>\r\n            <td>{employee.email}</td>\r\n        </tr>\r\n        \r\n    )} else {\r\n        for (i=0; i< employeeJson.employees.length; i++) {\r\n            if ((employeeJson.employees[i].name).includes(searchName.name)) {\r\n                renderEmployeeArray[i] = employeeJson.employees[i];\r\n            }\r\n        }\r\n\r\n        employeeItems = renderEmployeeArray.map(employee => \r\n\r\n            <tr key = {employee.id}>\r\n            <th  scope =\"row\">{employee.id}</th>\r\n            <td className =\"w-25\"> <img src= {employee.photo} className =\"img-fluid img-thumbnail\" alt = {employee.name}></img></td>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.position}</td>\r\n            <td>{employee.email}</td>\r\n        </tr>\r\n        )}\r\n\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className =\"row\">\r\n                <div className=\"col-4\"></div>\r\n                    <form className=\"form-inline\" onSubmit={handleSubmit}>\r\n                        <div className=\"form-group mx-sm-4 mb-2\">\r\n                            <input type=\"name\" className=\"form-control\" id=\"inputSearchName\" placeholder=\"Name (Case Sensitive)\" onChange={handleChange}></input>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary mb-2\">Filter</button>\r\n                    </form>\r\n            </div>\r\n\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Photo</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Position</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { employeeItems }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n        \r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Wrapper from './components/Wrapper'\nimport Table from './components/Table'\n\n\n\nfunction App() {\n\n    return (\n      <Wrapper>\n            <Header></Header>\n            <Table></Table>\n      </Wrapper>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';  \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}